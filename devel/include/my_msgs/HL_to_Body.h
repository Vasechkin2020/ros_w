// Generated by gencpp from file my_msgs/HL_to_Body.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_HL_TO_BODY_H
#define MY_MSGS_MESSAGE_HL_TO_BODY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct HL_to_Body_
{
  typedef HL_to_Body_<ContainerAllocator> Type;

  HL_to_Body_()
    : id(0)
    , time(0)
    , napravlenie(0)
    , command(0)
    , speed(0.0)
    , radius(0.0)
    , way(0.0)  {
    }
  HL_to_Body_(const ContainerAllocator& _alloc)
    : id(0)
    , time(0)
    , napravlenie(0)
    , command(0)
    , speed(0.0)
    , radius(0.0)
    , way(0.0)  {
  (void)_alloc;
    }



   typedef uint32_t _id_type;
  _id_type id;

   typedef uint32_t _time_type;
  _time_type time;

   typedef int32_t _napravlenie_type;
  _napravlenie_type napravlenie;

   typedef int32_t _command_type;
  _command_type command;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _way_type;
  _way_type way;





  typedef boost::shared_ptr< ::my_msgs::HL_to_Body_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::HL_to_Body_<ContainerAllocator> const> ConstPtr;

}; // struct HL_to_Body_

typedef ::my_msgs::HL_to_Body_<std::allocator<void> > HL_to_Body;

typedef boost::shared_ptr< ::my_msgs::HL_to_Body > HL_to_BodyPtr;
typedef boost::shared_ptr< ::my_msgs::HL_to_Body const> HL_to_BodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::HL_to_Body_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::HL_to_Body_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::HL_to_Body_<ContainerAllocator1> & lhs, const ::my_msgs::HL_to_Body_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.time == rhs.time &&
    lhs.napravlenie == rhs.napravlenie &&
    lhs.command == rhs.command &&
    lhs.speed == rhs.speed &&
    lhs.radius == rhs.radius &&
    lhs.way == rhs.way;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::HL_to_Body_<ContainerAllocator1> & lhs, const ::my_msgs::HL_to_Body_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::HL_to_Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::HL_to_Body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::HL_to_Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::HL_to_Body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::HL_to_Body_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::HL_to_Body_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::HL_to_Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0bd2918d8c2b4abd6fc00f2e6b7c48a8";
  }

  static const char* value(const ::my_msgs::HL_to_Body_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0bd2918d8c2b4abdULL;
  static const uint64_t static_value2 = 0x6fc00f2e6b7c48a8ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::HL_to_Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/HL_to_Body";
  }

  static const char* value(const ::my_msgs::HL_to_Body_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::HL_to_Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#  Формат топика в который выводим все что верхний уровень посылает в блок Body\n"
"#	uint32_t id = 0; // Номер команды по порядку\n"
"#	uint32_t time = 0; // Время в течении которого нужно двигаться\n"
"#	int32_t napravlenie = 0;\n"
"#	int32_t command = 0; // Команда для выполнения\n"
"#	float speed = 0;	 // Скорость которую нужно установить\n"
"#	float radius = 0;	 // Радиус по которому нужно двигаться\n"
"#	float way = 0;		 // Путь который нужно проехать\n"
"\n"
"	uint32 id\n"
"	uint32 time\n"
"	int32 napravlenie \n"
"	int32 command \n"
"	float32 speed \n"
"	float32 radius \n"
"	float32 way\n"
;
  }

  static const char* value(const ::my_msgs::HL_to_Body_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::HL_to_Body_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.time);
      stream.next(m.napravlenie);
      stream.next(m.command);
      stream.next(m.speed);
      stream.next(m.radius);
      stream.next(m.way);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HL_to_Body_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::HL_to_Body_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::HL_to_Body_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.id);
    s << indent << "time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.time);
    s << indent << "napravlenie: ";
    Printer<int32_t>::stream(s, indent + "  ", v.napravlenie);
    s << indent << "command: ";
    Printer<int32_t>::stream(s, indent + "  ", v.command);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "way: ";
    Printer<float>::stream(s, indent + "  ", v.way);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_HL_TO_BODY_H
