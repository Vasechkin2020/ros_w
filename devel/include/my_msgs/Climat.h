// Generated by gencpp from file my_msgs/Climat.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_CLIMAT_H
#define MY_MSGS_MESSAGE_CLIMAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace my_msgs
{
template <class ContainerAllocator>
struct Climat_
{
  typedef Climat_<ContainerAllocator> Type;

  Climat_()
    : temperature(0.0)
    , pressure(0.0)
    , humidity(0.0)  {
    }
  Climat_(const ContainerAllocator& _alloc)
    : temperature(0.0)
    , pressure(0.0)
    , humidity(0.0)  {
  (void)_alloc;
    }



   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef float _humidity_type;
  _humidity_type humidity;





  typedef boost::shared_ptr< ::my_msgs::Climat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Climat_<ContainerAllocator> const> ConstPtr;

}; // struct Climat_

typedef ::my_msgs::Climat_<std::allocator<void> > Climat;

typedef boost::shared_ptr< ::my_msgs::Climat > ClimatPtr;
typedef boost::shared_ptr< ::my_msgs::Climat const> ClimatConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Climat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Climat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::Climat_<ContainerAllocator1> & lhs, const ::my_msgs::Climat_<ContainerAllocator2> & rhs)
{
  return lhs.temperature == rhs.temperature &&
    lhs.pressure == rhs.pressure &&
    lhs.humidity == rhs.humidity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::Climat_<ContainerAllocator1> & lhs, const ::my_msgs::Climat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Climat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Climat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Climat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Climat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Climat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Climat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Climat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd31571b3ddb0a3cfe6eb63263527b97";
  }

  static const char* value(const ::my_msgs::Climat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd31571b3ddb0a3cULL;
  static const uint64_t static_value2 = 0xfe6eb63263527b97ULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Climat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Climat";
  }

  static const char* value(const ::my_msgs::Climat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Climat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "	float32 temperature\n"
"	float32 pressure\n"
"	float32 humidity\n"
;
  }

  static const char* value(const ::my_msgs::Climat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Climat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.temperature);
      stream.next(m.pressure);
      stream.next(m.humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Climat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Climat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Climat_<ContainerAllocator>& v)
  {
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "humidity: ";
    Printer<float>::stream(s, indent + "  ", v.humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_CLIMAT_H
