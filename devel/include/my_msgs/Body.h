// Generated by gencpp from file my_msgs/Body.msg
// DO NOT EDIT!


#ifndef MY_MSGS_MESSAGE_BODY_H
#define MY_MSGS_MESSAGE_BODY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <my_msgs/Xyz.h>
#include <my_msgs/Climat.h>

namespace my_msgs
{
template <class ContainerAllocator>
struct Body_
{
  typedef Body_<ContainerAllocator> Type;

  Body_()
    : bno055()
    , bme280()
    , radius(0.0)
    , speed(0.0)
    , odom(0.0)
    , napravlen(0)
    , distance_lazer(0.0)
    , distance_uzi(0.0)  {
    }
  Body_(const ContainerAllocator& _alloc)
    : bno055(_alloc)
    , bme280(_alloc)
    , radius(0.0)
    , speed(0.0)
    , odom(0.0)
    , napravlen(0)
    , distance_lazer(0.0)
    , distance_uzi(0.0)  {
  (void)_alloc;
    }



   typedef  ::my_msgs::Xyz_<ContainerAllocator>  _bno055_type;
  _bno055_type bno055;

   typedef  ::my_msgs::Climat_<ContainerAllocator>  _bme280_type;
  _bme280_type bme280;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _odom_type;
  _odom_type odom;

   typedef int32_t _napravlen_type;
  _napravlen_type napravlen;

   typedef float _distance_lazer_type;
  _distance_lazer_type distance_lazer;

   typedef float _distance_uzi_type;
  _distance_uzi_type distance_uzi;





  typedef boost::shared_ptr< ::my_msgs::Body_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::my_msgs::Body_<ContainerAllocator> const> ConstPtr;

}; // struct Body_

typedef ::my_msgs::Body_<std::allocator<void> > Body;

typedef boost::shared_ptr< ::my_msgs::Body > BodyPtr;
typedef boost::shared_ptr< ::my_msgs::Body const> BodyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::my_msgs::Body_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::my_msgs::Body_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::my_msgs::Body_<ContainerAllocator1> & lhs, const ::my_msgs::Body_<ContainerAllocator2> & rhs)
{
  return lhs.bno055 == rhs.bno055 &&
    lhs.bme280 == rhs.bme280 &&
    lhs.radius == rhs.radius &&
    lhs.speed == rhs.speed &&
    lhs.odom == rhs.odom &&
    lhs.napravlen == rhs.napravlen &&
    lhs.distance_lazer == rhs.distance_lazer &&
    lhs.distance_uzi == rhs.distance_uzi;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::my_msgs::Body_<ContainerAllocator1> & lhs, const ::my_msgs::Body_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace my_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::my_msgs::Body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Body_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::my_msgs::Body_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Body_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::my_msgs::Body_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::my_msgs::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb99abd577c79832a68a95987cf3850e";
  }

  static const char* value(const ::my_msgs::Body_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb99abd577c79832ULL;
  static const uint64_t static_value2 = 0xa68a95987cf3850eULL;
};

template<class ContainerAllocator>
struct DataType< ::my_msgs::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "my_msgs/Body";
  }

  static const char* value(const ::my_msgs::Body_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::my_msgs::Body_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Структура топика с моими данными получаемыми с нижнего уровня Body\n"
"#	Struct_XYZ bno055;	   //Данные с датчика BNO055\n"
"#	Struct_BMP280 bmp280;  //Данные с датчика BMP280\n"
"#	float radius = 0; //Радиус по которому едем\n"
"#	float speed = 0;  // Заданная скорость	с которой едет тело\n"
"#	float odom = 0;	  //Пройденный телом путь\n"
"#	int32_t napravlen = 0; // Напрвление 1 по часовой или -1 против часовой, 0- по прямой\n"
"#	uint32_t distance_Lazer = 0;\n"
"#	float distance_UZI = 0;\n"
"\n"
"Xyz  bno055\n"
"Climat  bme280\n"
"float32 radius\n"
"float32 speed\n"
"float32 odom\n"
"int32 napravlen\n"
"float32 distance_lazer\n"
"float32 distance_uzi\n"
"\n"
"================================================================================\n"
"MSG: my_msgs/Xyz\n"
"float32 x\n"
"float32 y\n"
"float32 z\n"
"================================================================================\n"
"MSG: my_msgs/Climat\n"
"	float32 temperature\n"
"	float32 pressure\n"
"	float32 humidity\n"
;
  }

  static const char* value(const ::my_msgs::Body_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::my_msgs::Body_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bno055);
      stream.next(m.bme280);
      stream.next(m.radius);
      stream.next(m.speed);
      stream.next(m.odom);
      stream.next(m.napravlen);
      stream.next(m.distance_lazer);
      stream.next(m.distance_uzi);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Body_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::my_msgs::Body_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::my_msgs::Body_<ContainerAllocator>& v)
  {
    s << indent << "bno055: ";
    s << std::endl;
    Printer< ::my_msgs::Xyz_<ContainerAllocator> >::stream(s, indent + "  ", v.bno055);
    s << indent << "bme280: ";
    s << std::endl;
    Printer< ::my_msgs::Climat_<ContainerAllocator> >::stream(s, indent + "  ", v.bme280);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "odom: ";
    Printer<float>::stream(s, indent + "  ", v.odom);
    s << indent << "napravlen: ";
    Printer<int32_t>::stream(s, indent + "  ", v.napravlen);
    s << indent << "distance_lazer: ";
    Printer<float>::stream(s, indent + "  ", v.distance_lazer);
    s << indent << "distance_uzi: ";
    Printer<float>::stream(s, indent + "  ", v.distance_uzi);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MY_MSGS_MESSAGE_BODY_H
