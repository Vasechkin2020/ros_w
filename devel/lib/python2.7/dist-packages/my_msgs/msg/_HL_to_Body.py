# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/HL_to_Body.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class HL_to_Body(genpy.Message):
  _md5sum = "0bd2918d8c2b4abd6fc00f2e6b7c48a8"
  _type = "my_msgs/HL_to_Body"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#  Формат топика в который выводим все что верхний уровень посылает в блок Body
#	uint32_t id = 0; // Номер команды по порядку
#	uint32_t time = 0; // Время в течении которого нужно двигаться
#	int32_t napravlenie = 0;
#	int32_t command = 0; // Команда для выполнения
#	float speed = 0;	 // Скорость которую нужно установить
#	float radius = 0;	 // Радиус по которому нужно двигаться
#	float way = 0;		 // Путь который нужно проехать

	uint32 id
	uint32 time
	int32 napravlenie 
	int32 command 
	float32 speed 
	float32 radius 
	float32 way"""
  __slots__ = ['id','time','napravlenie','command','speed','radius','way']
  _slot_types = ['uint32','uint32','int32','int32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,time,napravlenie,command,speed,radius,way

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HL_to_Body, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.time is None:
        self.time = 0
      if self.napravlenie is None:
        self.napravlenie = 0
      if self.command is None:
        self.command = 0
      if self.speed is None:
        self.speed = 0.
      if self.radius is None:
        self.radius = 0.
      if self.way is None:
        self.way = 0.
    else:
      self.id = 0
      self.time = 0
      self.napravlenie = 0
      self.command = 0
      self.speed = 0.
      self.radius = 0.
      self.way = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i3f().pack(_x.id, _x.time, _x.napravlenie, _x.command, _x.speed, _x.radius, _x.way))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.time, _x.napravlenie, _x.command, _x.speed, _x.radius, _x.way,) = _get_struct_2I2i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I2i3f().pack(_x.id, _x.time, _x.napravlenie, _x.command, _x.speed, _x.radius, _x.way))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.id, _x.time, _x.napravlenie, _x.command, _x.speed, _x.radius, _x.way,) = _get_struct_2I2i3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I2i3f = None
def _get_struct_2I2i3f():
    global _struct_2I2i3f
    if _struct_2I2i3f is None:
        _struct_2I2i3f = struct.Struct("<2I2i3f")
    return _struct_2I2i3f
