# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from my_msgs/Body.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import my_msgs.msg

class Body(genpy.Message):
  _md5sum = "eb99abd577c79832a68a95987cf3850e"
  _type = "my_msgs/Body"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Структура топика с моими данными получаемыми с нижнего уровня Body
#	Struct_XYZ bno055;	   //Данные с датчика BNO055
#	Struct_BMP280 bmp280;  //Данные с датчика BMP280
#	float radius = 0; //Радиус по которому едем
#	float speed = 0;  // Заданная скорость	с которой едет тело
#	float odom = 0;	  //Пройденный телом путь
#	int32_t napravlen = 0; // Напрвление 1 по часовой или -1 против часовой, 0- по прямой
#	uint32_t distance_Lazer = 0;
#	float distance_UZI = 0;

Xyz  bno055
Climat  bme280
float32 radius
float32 speed
float32 odom
int32 napravlen
float32 distance_lazer
float32 distance_uzi

================================================================================
MSG: my_msgs/Xyz
float32 x
float32 y
float32 z
================================================================================
MSG: my_msgs/Climat
	float32 temperature
	float32 pressure
	float32 humidity"""
  __slots__ = ['bno055','bme280','radius','speed','odom','napravlen','distance_lazer','distance_uzi']
  _slot_types = ['my_msgs/Xyz','my_msgs/Climat','float32','float32','float32','int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bno055,bme280,radius,speed,odom,napravlen,distance_lazer,distance_uzi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Body, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bno055 is None:
        self.bno055 = my_msgs.msg.Xyz()
      if self.bme280 is None:
        self.bme280 = my_msgs.msg.Climat()
      if self.radius is None:
        self.radius = 0.
      if self.speed is None:
        self.speed = 0.
      if self.odom is None:
        self.odom = 0.
      if self.napravlen is None:
        self.napravlen = 0
      if self.distance_lazer is None:
        self.distance_lazer = 0.
      if self.distance_uzi is None:
        self.distance_uzi = 0.
    else:
      self.bno055 = my_msgs.msg.Xyz()
      self.bme280 = my_msgs.msg.Climat()
      self.radius = 0.
      self.speed = 0.
      self.odom = 0.
      self.napravlen = 0
      self.distance_lazer = 0.
      self.distance_uzi = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_9fi2f().pack(_x.bno055.x, _x.bno055.y, _x.bno055.z, _x.bme280.temperature, _x.bme280.pressure, _x.bme280.humidity, _x.radius, _x.speed, _x.odom, _x.napravlen, _x.distance_lazer, _x.distance_uzi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bno055 is None:
        self.bno055 = my_msgs.msg.Xyz()
      if self.bme280 is None:
        self.bme280 = my_msgs.msg.Climat()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.bno055.x, _x.bno055.y, _x.bno055.z, _x.bme280.temperature, _x.bme280.pressure, _x.bme280.humidity, _x.radius, _x.speed, _x.odom, _x.napravlen, _x.distance_lazer, _x.distance_uzi,) = _get_struct_9fi2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_9fi2f().pack(_x.bno055.x, _x.bno055.y, _x.bno055.z, _x.bme280.temperature, _x.bme280.pressure, _x.bme280.humidity, _x.radius, _x.speed, _x.odom, _x.napravlen, _x.distance_lazer, _x.distance_uzi))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bno055 is None:
        self.bno055 = my_msgs.msg.Xyz()
      if self.bme280 is None:
        self.bme280 = my_msgs.msg.Climat()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.bno055.x, _x.bno055.y, _x.bno055.z, _x.bme280.temperature, _x.bme280.pressure, _x.bme280.humidity, _x.radius, _x.speed, _x.odom, _x.napravlen, _x.distance_lazer, _x.distance_uzi,) = _get_struct_9fi2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_9fi2f = None
def _get_struct_9fi2f():
    global _struct_9fi2f
    if _struct_9fi2f is None:
        _struct_9fi2f = struct.Struct("<9fi2f")
    return _struct_9fi2f
